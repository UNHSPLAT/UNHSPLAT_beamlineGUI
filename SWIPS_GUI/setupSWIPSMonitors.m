function monitors = setupSWIPSMonitors(instruments)
    % Function initializing and defining properties of measured values for SWIPS system
    
    % =======================================================================
    % define read functions monitors will call to manipulate instrument output 
    % =======================================================================
    function val = read_caenHVPS(self)
        val = self.parent.lastRead;
    end

    % =======================================================================
    % Define monitors for CAEN HVPS channels
    % =======================================================================
    function val = sim_set(self,val)
        parent_len = length(self.parent.lastRead);
        self.parent.lastRead = ones(1,parent_len)*val;
    end

    function set_MCPHVPS(self,volt)

        if isnan(volt)
            errordlg('A valid voltage value must be entered!','Invalid input!');
            return
        elseif abs(volt) > abs(self.parent.VMax) || abs(volt) < abs(self.parent.VMin)
            errordlg(['Defl voltage setpoint must be between ',num2str(hDefl.VMin),' and ',num2str(hDefl.VMax),' V!'],'Invalid input!');
            return
        end    

        function stop_func(src,evt)
            self.read();
            self.lock = false;
            delete(self.monTimer);
        end
        self.lock = true;
        %check the voltage being applied and ramp the voltage in steps if need be
        minstep = 10;
        step_rate = 5;

        if abs(volt)-abs(self.lastRead)>minstep
            multivolt = linspace(self.lastRead,volt,ceil((abs(volt)-abs(self.lastRead))/minstep)+1);
            multivolt = multivolt(2:end);
            self.monTimer = timer('Period',minstep/(step_rate),... %period
                      'ExecutionMode','fixedSpacing',... %{singleShot,fixedRate,fixedSpacing,fixedDelay}
                      'BusyMode','queue',... %{drop, error, queue}
                      'TasksToExecute',numel(multivolt),...          
                      'StartDelay',0,...
                      'TimerFcn',@(src,evt)self.parent.setVSet(multivolt(get(src,'TasksExecuted'))),...
                      'StartFcn',@(src,evt)setfield( self , 'lock' , true ),...
                      'StopFcn',@stop_func,...
                      'ErrorFcn',@stop_func);
            start(self.monTimer);
        else
            self.parent.setVSet(volt);
            self.lock = false;
        end
    end

    function set_daq_thresh(self,val)
        % assign lock, configure ppa, then release lock
        self.lock = true;
        self.parent.configurePPA_ok(int32(ones(1,16)*val));
        self.lock = false;
    end

    function set_caen_volt(self,chan,volt)
        % set voltage and account for lock
        self.lock = true;
        self.parent.setVSet(chan,volt)
        self.lock = false;
    end
    
    monitors = struct(...
        'IMCP', monitor('readFunc', @(self) self.parent.lastRead(2), ...
                        'textLabel', 'MCP Supply Current', ...
                        'unit', 'A', ...
                        'active', false, ...
                        'formatSpec', '%.3e', ...
                        'group', 'HV', ...
                        'parent', instruments.HvMCPn ...
                        ), ...
        'voltMCP', monitor('readFunc', @(self) self.parent.lastRead(1), ...
                        'setFunc',@(self,x) set_MCPHVPS(self,-abs(x)), ...
                        'textLabel', 'MCP Voltage', ...
                        'unit', 'V', ...
                        'active', true, ...
                        'formatSpec', '%.1f', ...
                        'group', 'HV', ...
                        'parent', instruments.HvMCPn ...
                        ), ...
        'voltCh0_upDefl', monitor('readFunc', @(self) self.parent.lastRead(1), ...
                        'setFunc', @(self,volt) set_caen_volt(self,0,volt), ...
                        'textLabel', 'Upper Deflector Voltage', ...
                        'unit', 'V', ...
                        'active', true, ...
                        'formatSpec', '%.1f', ...
                        'group', 'HV', ...
                        'parent', instruments.caen_HVPS1 ...
                        ), ...
        'voltCh1_lowDefl', monitor('readFunc', @(self) self.parent.lastRead(2), ...
                        'setFunc', @(self,volt)  set_caen_volt(self,1,volt), ...
                        'textLabel', 'Lower Deflector Voltage', ...
                        'unit', 'V', ...
                        'active', true, ...
                        'formatSpec', '%.1f', ...
                        'group', 'HV', ...
                        'parent', instruments.caen_HVPS1 ...
                        ), ...
        'voltCh2_flRed', monitor('readFunc', @(self) -self.parent.lastRead(3), ...
                        'setFunc', @(self,volt)  set_caen_volt(self,2,volt), ...
                        'textLabel', 'Flux Reducer Voltage', ...
                        'unit', 'V', ...
                        'active', true, ...
                        'formatSpec', '%.1f', ...
                        'group', 'HV', ...
                        'parent', instruments.caen_HVPS1 ...
                        ), ...
        'voltCh3_inDome', monitor('readFunc', @(self) -self.parent.lastRead(4), ...
                        'setFunc', @(self,volt)  set_caen_volt(self,3,volt), ...
                        'textLabel', 'Inner Dome Voltage', ...
                        'unit', 'V', ...
                        'active', true, ...
                        'formatSpec', '%.1f', ...
                        'group', 'HV', ...
                        'parent', instruments.caen_HVPS1 ...
                        ), ...
        'posAzm', monitor('readFunc', @(self) self.parent.lastRead(1), ...
                        'setFunc', @(self,pos) self.parent.setPosition('Group1',pos), ...
                        'textLabel', 'Azm Angle', ...
                        'unit', 'deg', ...
                        'active', true, ...
                        'formatSpec', '%.3f', ...
                        'group', 'position', ...
                        'parent', instruments.newportStage ...
                        ), ...
        'posLin', monitor('readFunc', @(self) self.parent.lastRead(2), ...
                        'setFunc', @(self,pos) self.parent.setPosition('Group2',pos), ...
                        'textLabel', 'Linear Position', ...
                        'unit', 'mm', ...
                        'active', true, ...
                        'formatSpec', '%.3f', ...
                        'group', 'position', ...
                        'parent', instruments.newportStage ...
                        ), ...
        'posElv', monitor('readFunc', @(self) self.parent.lastRead(3), ...
                        'setFunc', @(self,pos) self.parent.setPosition('Group3',pos), ...
                        'textLabel', 'Elv. Angle', ...
                        'unit', 'deg', ...
                        'active', true, ...
                        'formatSpec', '%.3f', ...
                        'group', 'position', ...
                        'parent', instruments.newportStage ...
                        ), ...
        'dateTime', monitor('readFunc', @(x) datetime(now(), 'ConvertFrom', 'datenum'), ...
                        'textLabel', 'Date Time', ...
                        'unit', 'D-M-Y H:M:S', ...
                        'group','status',...
                        'formatSpec', "%s" ...
                        ), ...
        'T', monitor('readFunc', @(x) now(), ...
                        'textLabel', 'Time', ...
                        'unit', 'DateNum', ...
                        'group','status',...
                        'formatSpec', "%d" ...
                        ), ...
        'OK_DaqThresh', monitor('readFunc', @(x) max(x.parent.dac_table), ...
                        'setFunc', @set_daq_thresh, ...
                        'textLabel', 'Max Daq Threshold Setting', ...
                        'active',true,...
                        'unit', '', ...
                        'group','inst',...
                        'parent', instruments.Opal_Kelly, ...
                        'formatSpec', "%d" ...
                        ), ...
        'totLCnt', monitor('readFunc', @(x) sum(x.parent.lastRead.rawLCnt), ...
                        'textLabel', 'totLCnt', ...
                        'unit', 'Cts', ...
                        'group','inst',...
                        'parent', instruments.Opal_Kelly, ...
                        'formatSpec', "%d" ...
                        ), ...
        'rawLCnt', monitor('readFunc', @(x) x.parent.lastRead.rawLCnt, ...
                        'textLabel', 'rawLCnt', ...
                        'unit', 'Cts', ...
                        'group','inst',...
                        'parent', instruments.Opal_Kelly, ...
                        'formatSpec', "%d," ...
                        ), ...
        'rawUCnt', monitor('readFunc',  @(x) x.parent.lastRead.rawUCnt, ...
                        'textLabel', 'rawUCnt', ...
                        'unit', 'Cts', ...
                        'group','inst',...
                        'parent', instruments.Opal_Kelly, ...
                        'formatSpec', "%d," ...
                        ), ...
         'PPACnt', monitor('readFunc',  @(x) x.parent.lastRead.PPACnt, ...
                        'textLabel', 'PPACnt', ...
                        'unit', 'cts', ...
                        'group','inst',...
                        'parent', instruments.Opal_Kelly, ...
                        'formatSpec', "%d," ...
                        ) ...
        );

    % Assign tags to monitors
    fields = fieldnames(monitors);
    for i = 1:numel(fields)
        monitors.(fields{i}).setfield('Tag', fields{i});
    end
end
